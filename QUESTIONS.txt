Once you have completed your implementation, review and respond to the questions below. Each of your responses should be at least four sentences.

----- Question 1 -----

What kinds of faults can your peer-to-peer chat implementation tolerate? Faults may include problems with machines or the network, as well as program crashes. Be specific about what failure situations you could tolerate, and explain how the system can continue to work in the face of these failures.

Example 1
Suppose that A starts the server and computer B connects to computer A.
At this point, if computer A quits the server, computer B will not be forcefully kicked out.
They will still be allowed to send a text, albeit only to themselves. However, other computers
can connect to its port and form a new network.

Example 2
Suppose computer A is connected to computer B
Suppose computer B is connected to computer C 
Suppose computer D is connected to computer C 
Suppose computer E is connected to computer D 
If computer C quits the network legally (by typing :q or :quit) or quits the network forcefully (by exiting the 
terminal window), computers A and B can still talk to each other and computers D and E can still talk to each 
other in two separate networks.



---- Question 2 ----

What faults will cause your peer-to-peer chat to fail, or to operate in some diminished capacity? Again, be specific about the situations that will result in failure.

Using example 2 above, when computer C disconnects, computers A and B will no longer be able to communicate
with computers C and D. However, A and B can form a network on its own and D and E can form a network on its 
own and communicate with each other. However, the peer-to-peer chat would be operating in a diminished capacity.

Another fault that may arise in the peer-to-peer chat occurs when a computer disconnects before it has sended
the messages it received. Suppose that computer A sends a message to its peer, computer B, before C disconnects.
A might assume that C is still in the network but if C disconnects before it gets a chance to forward the message
it received from computer B, computers D and E will not receive the message that computer A wanted them to see.


---- Question 3 ----

One mechanism for tolerating failure is replication. If each client connected to two existing peers instead of just one, would that help you tolerate any additional faults? What problems could this change create for your implementation?

If each client connected to two existing peers instead of just one, it will help us tolerate some additional faults.
Using example 2 from above:
Suppose that computer A is now connected not only to computer B but also to computer E. If computer C was 
disconnected, computers A, B, D, and E can still talk to each other and will be in the same network.

If we changed our implementation to address this issue, a situation may arise where the computers are connected 
in a cycle and messages will constantly be sent to everyone. And the bigger problem lies in deciding how to
allow a client to connect to two existing peers.



---- Question 4 ----

Describe one additional change you could make to the peer-to-peer chat system that would allow it to tolerate faults. Describe how you would implement this change, and at least one example of how it would allow you to tolerate a fault.

Using example 2 above, if computer C disconnects, force computer B to connect to computer D or vice versa.
In other words, connect C's neighbors to each other when C disconnects so that the remaining computers in the
network-A, B, D, and E-can still communicate with each other.

We can implement this change by having a computer that stores information on each computers' peers.
By using this information, we can reestablish a connection between one of computers A or B with computers D or E
in the case that computer C disconnects.




